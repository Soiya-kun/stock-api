// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/port/fileaws.go

// Package mock_port is a generated GoMock package.
package mock_port

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileDriver is a mock of FileDriver interface.
type MockFileDriver struct {
	ctrl     *gomock.Controller
	recorder *MockFileDriverMockRecorder
}

// MockFileDriverMockRecorder is the mock recorder for MockFileDriver.
type MockFileDriverMockRecorder struct {
	mock *MockFileDriver
}

// NewMockFileDriver creates a new mock instance.
func NewMockFileDriver(ctrl *gomock.Controller) *MockFileDriver {
	mock := &MockFileDriver{ctrl: ctrl}
	mock.recorder = &MockFileDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileDriver) EXPECT() *MockFileDriverMockRecorder {
	return m.recorder
}

// CopyFile mocks base method.
func (m *MockFileDriver) CopyFile(srcId, dstId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFile", srcId, dstId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFile indicates an expected call of CopyFile.
func (mr *MockFileDriverMockRecorder) CopyFile(srcId, dstId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFile", reflect.TypeOf((*MockFileDriver)(nil).CopyFile), srcId, dstId)
}

// CreatePreSignedURLForGet mocks base method.
func (m *MockFileDriver) CreatePreSignedURLForGet(filepath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePreSignedURLForGet", filepath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePreSignedURLForGet indicates an expected call of CreatePreSignedURLForGet.
func (mr *MockFileDriverMockRecorder) CreatePreSignedURLForGet(filepath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePreSignedURLForGet", reflect.TypeOf((*MockFileDriver)(nil).CreatePreSignedURLForGet), filepath)
}

// CreatePreSignedURLForPut mocks base method.
func (m *MockFileDriver) CreatePreSignedURLForPut(filepath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePreSignedURLForPut", filepath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePreSignedURLForPut indicates an expected call of CreatePreSignedURLForPut.
func (mr *MockFileDriverMockRecorder) CreatePreSignedURLForPut(filepath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePreSignedURLForPut", reflect.TypeOf((*MockFileDriver)(nil).CreatePreSignedURLForPut), filepath)
}

// DeleteFileWithPath mocks base method.
func (m *MockFileDriver) DeleteFileWithPath(filepath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileWithPath", filepath)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFileWithPath indicates an expected call of DeleteFileWithPath.
func (mr *MockFileDriverMockRecorder) DeleteFileWithPath(filepath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileWithPath", reflect.TypeOf((*MockFileDriver)(nil).DeleteFileWithPath), filepath)
}
